{"remainingRequest":"/Users/yoorabaek/Dev_test/client/node_modules/babel-loader/lib/index.js!/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/Users/yoorabaek/Dev_test/client/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/yoorabaek/Dev_test/client/src/components/ProductDetail.vue?vue&type=template&id=3a991620&scoped=true","dependencies":[{"path":"/Users/yoorabaek/Dev_test/client/src/components/ProductDetail.vue","mtime":1645238723342},{"path":"/Users/yoorabaek/Dev_test/client/babel.config.js","mtime":1638856988000},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/cache-loader/dist/cjs.js","mtime":1638841237816},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/babel-loader/lib/index.js","mtime":1639623481094},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1642430036117},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/cache-loader/dist/cjs.js","mtime":1638841237816},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/index.js","mtime":1642430036111}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}