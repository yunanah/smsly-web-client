{"remainingRequest":"/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/yoorabaek/Dev_test/client/src/views/TestResult.vue?vue&type=style&index=0&id=145694ee&lang=scss&scoped=true","dependencies":[{"path":"/Users/yoorabaek/Dev_test/client/src/views/TestResult.vue","mtime":1645238723354},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/css-loader/dist/cjs.js","mtime":1638841242025},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1642430036117},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/postcss-loader/src/index.js","mtime":1638841242183},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/sass-loader/dist/cjs.js","mtime":1638841245504},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/cache-loader/dist/cjs.js","mtime":1638841237816},{"path":"/Users/yoorabaek/Dev_test/client/node_modules/vue-loader-v16/dist/index.js","mtime":1642430036111}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Cio6bm90KGkpOm5vdChidXR0b24pIHsKICBmb250LWZhbWlseTogJGZvbnQtbWFpbiwgc2Fucy1zZXJpZiAhaW1wb3J0YW50Owp9Ci5ib2R5IHsKICAvKiBoZWlnaHQ6IDU3MHZoOyAqLwogIGhlaWdodDogYXV0bzsKICBiYWNrZ3JvdW5kLWNvbG9yOiAkZ3JheTsKICBkaXNwbGF5OiBmbGV4LXN0YXJ0OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBwYWRkaW5nOiA2MHB4IDE4MHB4OwoKICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA5MTJweCkgewogICAgcGFkZGluZzogNDBweCA4cHg7CiAgICAvKiBoZWlnaHQ6IDQ1MDBweDsgKi8KICAgIGhlaWdodDogYXV0bzsKICB9CgogIC5mb3JtIHsKICAgIHBhZGRpbmc6IDI0cHg7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICBib3gtc2hhZG93OiAxcHggNHB4IDRweCAxcHggJGJvcmRlcjsKICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7CiAgICB3aWR0aDogMTAwJTsKICAgIC8qIGhlaWdodDogOTAwcHg7ICovCiAgICBtYXJnaW4tdG9wOiA5NnB4OwogICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQgLSAxcHgpIHsKICAgICAgcGFkZGluZzogMTZweDsKICAgIH0KCiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAyODBweCkgewogICAgICBwYWRkaW5nOiAwcHg7CiAgICB9CgogICAgLm1haW4tdGl0bGUgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKCiAgICAgIHNwYW4gewogICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRzZWNvbmRhcnkpOwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAvKiBtYXJnaW46IDhweDsgKi8KICAgICAgfQoKICAgICAgaDEgewogICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMjgsICRwcmltYXJ5KTsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgbWFyZ2luOiA4cHg7CgogICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQxNHB4KSB7CiAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDI0LCAkcHJpbWFyeSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgLmJyZWFzdC1yZXN1bHQgewogICAgICBoMiB7CiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICB9CiAgICB9CgogICAgLnJlc3VsdC10aXRsZSB7CiAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMjQsICRwcmltYXJ5KTsKICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICBtYXJnaW4tdG9wOiAzMnB4OwoKICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDE0cHgpIHsKICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE4LCAkcHJpbWFyeSk7CiAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgbWFyZ2luLXRvcDogMTZweDsKICAgICAgfQogICAgfQoKICAgIC5jb250YWluZXIgewogICAgICBkaXNwbGF5OiBmbGV4OwogICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgYm9yZGVyLXJhZGl1czogOHB4OwogICAgICBib3gtc2hhZG93OiAxcHggNHB4IDRweCAxcHggJGJvcmRlcjsKICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgd2lkdGg6IDgwJTsKICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQ7CiAgICAgIG1hcmdpbjogNDRweCBhdXRvOwogICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgIHdpZHRoOiA5NyU7CiAgICAgICAgbWFyZ2luOiAyOHB4IGF1dG87CiAgICAgIH0KCiAgICAgIC8qICY6aG92ZXIgewogICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJhY2tncm91bmQ7CiAgICAgICAgICAuY29udGFpbmVyLXRpdGxlIHsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJsdWU7CiAgICAgICAgICB9CiAgICAgICAgfSAqLwoKICAgICAgLmNvbnRhaW5lci10aXRsZSB7CiAgICAgICAgd2lkdGg6IDIyNHB4OwogICAgICAgIHBhZGRpbmc6IDRweDsKICAgICAgICAvKiBtYXJnaW4tdG9wOiAxNnB4OyAqLwogICAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7CiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJGJsdWUtbGlnaHQ7CiAgICAgICAgY29sb3I6ICR3aGl0ZTsKICAgICAgICBib3gtc2hhZG93OiAxcHggMnB4IDJweCAxcHggJGJvcmRlcjsKICAgICAgICAvKiBib3JkZXItYm90dG9tOiAxcHggc29saWQgJHRlcnRpYXJ5OyAqLwogICAgICAgIGgzIHsKICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTgpOwogICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CiAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLmNvbnRhaW5lci1jb250ZW50IHsKICAgICAgICBwYWRkaW5nOiAwcHggMTZweCAxNnB4IDE2cHg7CiAgICAgIH0KICAgIH0KCiAgICAuc2l6ZSwKICAgIC53ZWFyaW5nLAogICAgLmhhcmQtdG8td2VhciB7CiAgICAgIHBhZGRpbmc6IDI0cHg7CgogICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MTRweCkgewogICAgICAgIHBhZGRpbmc6ICAyNHB4IDhweCA4cHggOHB4OwogICAgICB9CgogICAgICAvKiBzaXplIGNvbnRhaW5lciAqLwogICAgICAuY29udGFpbmVyLWNvbnRlbnQgewogICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRwcmltYXJ5KTsKICAgICAgICBtYXJnaW4tdG9wOiAxNnB4OwogICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKCiAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRwcmltYXJ5KTsKICAgICAgICB9CgogICAgICAgIHNwYW4gewogICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxOCwgJGJsdWUpOwogICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7CgogICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNiwgJGJsdWUpOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgcCB7CiAgICAgICAgICBwYWRkaW5nOiA4cHg7CiAgICAgICAgICBsaW5lLWhlaWdodDogMTgwJTsKCiAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC5icmVhc3QtdW5kZXJsaW5lIHsKICAgICAgcGFkZGluZzogMjRweDsKCiAgICAgIC5jb250YWluZXItY29udGVudCB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uOwogICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgICAgICAgLmltYWdlLWJveCB7CiAgICAgICAgICBkaXNwbGF5OiBmbGV4OwoKICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEwMjdweCkgewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgIH0KCiAgICAgICAgICAvKiBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICB3aWR0aDogOTAlOwogICAgICAgICAgfSAqLwoKICAgICAgICAgIC5pbWFnZS1pdGVtIHsKICAgICAgICAgICAgbWFyZ2luOiA0cHg7CiAgICAgICAgICAgIGZsZXgtZ3JvdzogMTsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CgogICAgICAgICAgICBsYWJlbCB7CiAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNiwgJHByaW1hcnkpOwogICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgICBtYXJnaW46IDRweCAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpbWcgewogICAgICAgICAgICAgIHdpZHRoOiAyMjBweDsKICAgICAgICAgICAgICBib3gtc2hhZG93OiAxcHggMnB4IDJweCAxcHggJGJvcmRlcjsKICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgd2lkdGg6IDE0MHB4OwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMzIwcHgpIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMjBweDsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC5pbmZvLXRhYmxlIHsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKCiAgICAgICAgICAudGFibGUtaGVhZCwKICAgICAgICAgIC5yaWdodC12YWx1ZXMsCiAgICAgICAgICAubGVmdC12YWx1ZXMgewogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7CiAgICAgICAgICAgIC8qIGZsZXgtZ3JvdzogMTsgKi8KCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7CiAgICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA0cHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5oZWFkLAogICAgICAgICAgICAudmFsdWUgewogICAgICAgICAgICAgIG1hcmdpbjogMzJweCA0cHg7CiAgICAgICAgICAgICAgd2lkdGg6IDI0NHB4OwogICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKCiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgIG1hcmdpbjogMjRweCAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmhlYWQgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRwcmltYXJ5KTsKICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgICBwYWRkaW5nOiAycHg7CiAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNCwgJHByaW1hcnkpOwogICAgICAgICAgICAgICAgd2lkdGg6IDgwcHg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAudmFsdWUgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRibHVlKTsKICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNnB4OwogICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTsKICAgICAgICAgICAgICB3aWR0aDogMTYwcHg7CiAgICAgICAgICAgICAgaGVpZ2h0OiAyOHB4OwoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNCwgJGJsdWUpOwogICAgICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICAgICAgd2lkdGg6IDk2cHg7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICAgICAgd2lkdGg6IDgwcHg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAubm9SZXN1bHQgewogICAgICAgICAgICAgIGNvbG9yOiAkc2Vjb25kYXJ5OwogICAgICAgICAgICB9CgogICAgICAgICAgICAubG9uZyB7CiAgICAgICAgICAgICAgd29yZC1icmVhazoga2VlcC1hbGw7CiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCA4cHg7CiAgICAgICAgICAgICAgICBoZWlnaHQ6IDU0cHg7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICAgICAgLyogaGVpZ2h0OiA3MHB4OyAqLwogICAgICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC8qIC5sZWZ0LXZhbHVlcyB7CiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMHB4OwogICAgICAgICAgfSAqLwogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC5mYXQtcmFuZ2UgewogICAgICBwYWRkaW5nOiAyNHB4OwoKICAgICAgLmNvbnRhaW5lci1jb250ZW50IHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CgogICAgICAgIC5hcmVhLWRpc3QtdHlwZSwKICAgICAgICAuaW5vdXQtZGlzdC10eXBlLAogICAgICAgIC51cGRvd24tZGlzdC10eXBlIHsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwogICAgICAgICAgbWFyZ2luOiAxNnB4IDA7CgogICAgICAgICAgaW1nIHsKICAgICAgICAgICAgd2lkdGg6IDE2NHB4OwogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7CiAgICAgICAgICAgIGJveC1zaGFkb3c6IDFweCAycHggMnB4IDFweCAkYm9yZGVyOwoKICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICB3aWR0aDogMTM2cHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7CiAgICAgICAgICAgICAgd2lkdGg6IDExNHB4OwogICAgICAgICAgICB9CiAgICAgICAgICB9CgogICAgICAgICAgLmRldGFpbC1pbmZvIHsKICAgICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKCiAgICAgICAgICAgIGg0IHsKICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE2LCAkcHJpbWFyeSk7CiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDsKICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTZweDsKICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7CiAgICAgICAgICAgICAgd2lkdGg6IDE0NHB4OwogICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDE2cHg7CiAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICAgIHBhZGRpbmc6IDJweDsKCiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRwcmltYXJ5KTsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMjBweDsKICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDsKICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgcCB7CiAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7CiAgICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTZweDsKCiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDRweDsKICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpIHsKICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiA0cHg7CiAgICAgICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7CgogICAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDEycHg7CiAgICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgc3BhbiB7CiAgICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE4LCAkYmx1ZS1kYXJrKTsKICAgICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkOwoKICAgICAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRibHVlLWRhcmspOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmRldGFpbHMgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRwcmltYXJ5KTsKICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMjhweDsKCiAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRwcmltYXJ5KTsKICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAwcHg7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxMywgJHByaW1hcnkpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC5kaWZmLWJyZWFzdCB7CiAgICAgIHBhZGRpbmc6IDI0cHg7CgogICAgICAuY29udGFpbmVyLWNvbnRlbnQgewogICAgICAgIC5pbmZvLXRhYmxlIHsKICAgICAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKCiAgICAgICAgICAudGFibGUtaGVhZCwKICAgICAgICAgIC5yaWdodC12YWx1ZXMgewogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDQ0cHg7CiAgICAgICAgICAgIC8qIGZsZXgtZ3JvdzogMTsgKi8KICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDI4cHg7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5oZWFkLAogICAgICAgICAgICAudmFsdWUgewogICAgICAgICAgICAgIG1hcmdpbjogMzJweCAwOwogICAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmhlYWQgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRwcmltYXJ5KTsKICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgICBwYWRkaW5nOiAycHg7CiAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICAudmFsdWUgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRibHVlKTsKICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiAxNnB4OwogICAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR3aGl0ZTsKICAgICAgICAgICAgICB3aWR0aDogMTYwcHg7CiAgICAgICAgICAgICAgaGVpZ2h0OiAzMHB4OwoKICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgd2lkdGg6IDEwMHB4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC5yaWdodC12YWx1ZXMgewogICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDBweDsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC5kZXRhaWwtdGV4dCB7CiAgICAgICAgICBtYXJnaW4tdG9wOiAxNnB4OwogICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNiwgJHByaW1hcnkpOwogICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNCwgJHByaW1hcnkpOwogICAgICAgICAgICBtYXJnaW4tdG9wOiAwcHg7CiAgICAgICAgICB9CiAgICAgICAgICBpIHsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxNnB4OwoKICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgc3BhbiB7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7CiAgICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAkdGVydGlhcnk7CiAgICAgICAgICAgIHBhZGRpbmc6IDhweDsKCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDI3MCU7CiAgICAgICAgICAgICAgLyogYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgICAgICAgICAgICAgICBib3JkZXItYm90dG9tOiAwcHg7CiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7ICovCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICAucG9zaXRpb24gewogICAgICBwYWRkaW5nOiAyNHB4OwoKICAgICAgLmNvbnRhaW5lci1jb250ZW50IHsKICAgICAgICBkaXNwbGF5OiBmbGV4OwogICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKCiAgICAgICAgLyogLnBhcnRpdGlvbnsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDsKICAgICAgICAgICAgYm9yZGVyOiAwLjNweCBzb2xpZCAkYm9yZGVyOwogICAgICAgICAgICB3aWR0aDogNDAwcHg7CiAgICAgICAgICAgIGhlaWdodDogMC42cHg7CiAgICAgICAgICB9ICAgKi8KCiAgICAgICAgLmdyYXBoLWJveCB7CiAgICAgICAgICBtYXJnaW4tdG9wOiAxNnB4OwogICAgICAgIH0KCiAgICAgICAgLmdyYXBoLWRldGFpbHMgewogICAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICAgIC8qIGp1c3RpZnktY29udGVudDogY2VudGVyOyAqLwogICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogICAgICAgICAgcGFkZGluZzogMzJweCA2NHB4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4OwoKICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgIHBhZGRpbmc6IDE2cHggMjBweDsKICAgICAgICAgIH0KCiAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICBwYWRkaW5nOiAxNnB4OwogICAgICAgICAgICAvKiB3aWR0aDogMTAwJTsgKi8KICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICB9CgogICAgICAgICAgLmRldGFpbC1pdGVtIHsKICAgICAgICAgICAgbWFyZ2luOiA4cHggMDsKCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDMyMHB4KSB7CiAgICAgICAgICAgICAgd2lkdGg6IDIxNnB4OwogICAgICAgICAgICAgIC8qIHBhZGRpbmc6IGF1dG8gMjRweDsgKi8KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmRldGFpbC1oZWFkIHsKICAgICAgICAgICAgICBzcGFuIHsKICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTgsICR3aGl0ZSk7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkYmx1ZTsKICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgICAgICAgIHBhZGRpbmc6IDJweCA2cHg7CiAgICAgICAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7CiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDsKCiAgICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE2LCAkd2hpdGUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBoNCB7CiAgICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE4LCAkcHJpbWFyeSk7CiAgICAgICAgICAgICAgICBmb250LXdlaWdodDogYm9sZGVyOwogICAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNiwgJHByaW1hcnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcCB7CiAgICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDEzLCAkc2Vjb25kYXJ5KTsKICAgICAgICAgICAgICAgIG1hcmdpbi1sZWZ0OiAyOHB4OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLmRldGFpbC10ZXh0IHsKICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMTZweDsKICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNnB4OwogICAgICAgICAgICAgIG1hcmdpbi10b3A6IDEycHg7CgogICAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgICAgICBtYXJnaW4tYm90dG9tOiA4cHg7CiAgICAgICAgICAgICAgICBtYXJnaW4tdG9wOiA4cHg7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGkgewogICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDE2cHg7CiAgICAgICAgICAgICAgICBjb2xvcjogJHByaW1hcnk7CiAgICAgICAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDhweDsKCiAgICAgICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgICAgICBtYXJnaW4tbGVmdDogMHB4OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBzcGFuIHsKICAgICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRwcmltYXJ5KTsKICAgICAgICAgICAgICAgIC8qIGZvbnQtd2VpZ2h0OiBib2xkOyAqLwogICAgICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNCwgJHByaW1hcnkpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICAgIC5yZXN1bHQtZWxzZSB7CiAgICAgIHBhZGRpbmc6IDI0cHg7CgogICAgICAuaW5mby10YWJsZSB7CiAgICAgICAgZGlzcGxheTogZmxleDsKICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKCiAgICAgICAgLnRhYmxlLWhlYWQsCiAgICAgICAgLnJpZ2h0LXZhbHVlcyB7CiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDQ0cHg7CiAgICAgICAgICAvKiBmbGV4LWdyb3c6IDE7ICovCgogICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7CiAgICAgICAgICB9CgogICAgICAgICAgLmhlYWQsCiAgICAgICAgICAudmFsdWUgewogICAgICAgICAgICBtYXJnaW46IDMycHggMDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwoKICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICAgICAgICBtYXJnaW46IDI0cHggMDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC5oZWFkIHsKICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNiwgJHByaW1hcnkpOwogICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICB3aWR0aDogMTAwcHg7CgogICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAkbWQtYnJlYWtwb2ludCkgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRwcmltYXJ5KTsKICAgICAgICAgICAgICB3aWR0aDogNjBweDsKICAgICAgICAgICAgfQogICAgICAgICAgfQoKICAgICAgICAgIC52YWx1ZSB7CiAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTYsICRibHVlKTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogMTZweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGRlcjsKICAgICAgICAgICAgcGFkZGluZzogMnB4OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkd2hpdGU7CiAgICAgICAgICAgIHdpZHRoOiAyNjBweDsKCiAgICAgICAgICAgIEBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ICRtZC1icmVha3BvaW50KSB7CiAgICAgICAgICAgICAgQGluY2x1ZGUgdGV4dC1zdHlsZSgxNCwgJGJsdWUpOwogICAgICAgICAgICAgIHdpZHRoOiAyMTZweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogNDE0cHgpIHsKICAgICAgICAgICAgICBAaW5jbHVkZSB0ZXh0LXN0eWxlKDE0LCAkYmx1ZSk7CiAgICAgICAgICAgICAgd2lkdGg6IDE5NnB4OwogICAgICAgICAgICB9CgogICAgICAgICAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiAzMjBweCkgewogICAgICAgICAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRibHVlKTsKICAgICAgICAgICAgICB3aWR0aDogMTgwcHg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC5yaWdodC12YWx1ZXMgewogICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwcHg7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfQoKICAuY29tbWVudHMgewogICAgcCB7CiAgICAgIEBpbmNsdWRlIHRleHQtc3R5bGUoMTQsICRzZWNvbmRhcnkpOwogICAgICBtYXJnaW4tdG9wOiAzMnB4OwogICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB9CiAgfQoKICAuYnV0dG9uLWNvbnRhaW5lciB7CiAgICAvKiBtYXJnaW46IDE2cHg7ICovCiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CgogICAgYnV0dG9uIHsKICAgICAgbWFyZ2luOiA4cHg7CiAgICAgIHdpZHRoOiAxODBweDsKICAgICAgQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogJG1kLWJyZWFrcG9pbnQpIHsKICAgICAgICBtYXJnaW46IDhweDsKICAgICAgICB3aWR0aDogMTYwcHg7CiAgICAgIH0KICAgIH0KICB9Cn0K"},null]}