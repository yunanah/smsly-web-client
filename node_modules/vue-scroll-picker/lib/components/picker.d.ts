import { PropType } from 'vue';
declare type MouseWheelEvent = MouseEvent & {
    deltaY: number;
};
export interface ScrollPickerOption {
    name: string;
    value: any;
}
export declare type ScrollPickerOptionable = string | number | boolean | ScrollPickerOption;
declare const _default: import("vue").DefineComponent<{
    modelValue: null;
    options: {
        type: PropType<ScrollPickerOptionable[]>;
        default: () => never[];
    };
    dragSensitivity: {
        type: NumberConstructor;
        default: number;
    };
    touchSensitivity: {
        type: NumberConstructor;
        default: number;
    };
    scrollSensitivity: {
        type: NumberConstructor;
        default: number;
    };
    empty: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: null;
    };
}, unknown, {
    refItems: HTMLDivElement[];
    internalOptions: ScrollPickerOption[];
    internalIndex: number;
    internalValue: any;
    pivots: number[];
    pivotsMin: number;
    pivotsMax: number;
    scroll: number | null;
    scrollOffsetTop: number;
    scrollMin: number;
    scrollMax: number;
    transitioning: boolean;
    transitionTimer: any;
    start: [scroll: number, clientY: number] | null;
    isMouseDown: boolean;
    isDragging: boolean;
}, {
    hasPlaceholder(): boolean;
}, {
    setRefItem(el: HTMLDivElement): void;
    resize(): void;
    calculatePivots(): void;
    sanitizeInternalIndex(index: number): number;
    findIndexFromScroll(scroll: number): number;
    findScrollByIndex(index: number): number;
    onWheel(event: MouseWheelEvent): void;
    onAfterWheel: (handler: () => void) => void;
    onStart(event: TouchEvent | MouseEvent): void;
    onMove(event: TouchEvent | MouseEvent): void;
    onEnd(event: TouchEvent | MouseEvent): void;
    onCancel(event: TouchEvent | MouseEvent): void;
    onClick(event: TouchEvent | MouseEvent): void;
    correction(index: number): void;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    options: ScrollPickerOptionable[];
    dragSensitivity: number;
    touchSensitivity: number;
    scrollSensitivity: number;
    empty: string;
    placeholder: string;
} & {
    modelValue?: any;
}>, {
    options: ScrollPickerOptionable[];
    dragSensitivity: number;
    touchSensitivity: number;
    scrollSensitivity: number;
    empty: string;
    placeholder: string;
}>;
export default _default;
